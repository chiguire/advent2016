module Advent2
    ( advent2_1, advent2_2
    ) where

-- general
data Direction = U | D | L | R deriving (Show, Read)
data Pos = Pos Int Int deriving (Show)

followWithPos :: (Pos -> Char) -> (Pos -> Direction -> Pos) -> Pos -> [Direction] -> Char
followWithPos n f p l = n $ foldl (f) p l

transf :: [Char] -> [Direction]
transf l = map (transf') (l)
    where transf' c = read [c]

-- part 1

num_1 :: Pos -> Char
num_1 (Pos 0 0) = '1'
num_1 (Pos 1 0) = '2'
num_1 (Pos 2 0) = '3'
num_1 (Pos 0 1) = '4'
num_1 (Pos 1 1) = '5'
num_1 (Pos 2 1) = '6'
num_1 (Pos 0 2) = '7'
num_1 (Pos 1 2) = '8'
num_1 (Pos 2 2) = '9'

topos_1 :: Char -> Pos
topos_1 '1' = (Pos 0 0)
topos_1 '2' = (Pos 1 0)
topos_1 '3' = (Pos 2 0)
topos_1 '4' = (Pos 0 1)
topos_1 '5' = (Pos 1 1)
topos_1 '6' = (Pos 2 1)
topos_1 '7' = (Pos 0 2)
topos_1 '8' = (Pos 1 2)
topos_1 '9' = (Pos 2 2)

travel_1 :: Pos -> Direction -> Pos 
travel_1 (Pos x 2) U = Pos x 1
travel_1 (Pos x 1) U = Pos x 0
travel_1 (Pos x 0) U = Pos x 0
travel_1 (Pos x 2) D = Pos x 2
travel_1 (Pos x 1) D = Pos x 2
travel_1 (Pos x 0) D = Pos x 1
       
travel_1 (Pos 2 y) L = Pos 1 y
travel_1 (Pos 1 y) L = Pos 0 y
travel_1 (Pos 0 y) L = Pos 0 y
travel_1 (Pos 2 y) R = Pos 2 y
travel_1 (Pos 1 y) R = Pos 2 y
travel_1 (Pos 0 y) R = Pos 1 y

-- part 2

num_2 :: Pos -> Char
num_2 (Pos 2 0) = '1'
num_2 (Pos 1 1) = '2'
num_2 (Pos 2 1) = '3'
num_2 (Pos 3 1) = '4'
num_2 (Pos 0 2) = '5'
num_2 (Pos 1 2) = '6'
num_2 (Pos 2 2) = '7'
num_2 (Pos 3 2) = '8'
num_2 (Pos 4 2) = '9'
num_2 (Pos 1 3) = 'A'
num_2 (Pos 2 3) = 'B'
num_2 (Pos 3 3) = 'C'
num_2 (Pos 2 4) = 'D'

topos_2 :: Char -> Pos
topos_2 '1' = (Pos 2 0)
topos_2 '2' = (Pos 1 1)
topos_2 '3' = (Pos 2 1)
topos_2 '4' = (Pos 3 1)
topos_2 '5' = (Pos 0 2)
topos_2 '6' = (Pos 1 2)
topos_2 '7' = (Pos 2 2)
topos_2 '8' = (Pos 3 2)
topos_2 '9' = (Pos 4 2)
topos_2 'A' = (Pos 1 3)
topos_2 'B' = (Pos 2 3)
topos_2 'C' = (Pos 3 3)
topos_2 'D' = (Pos 2 4)

travel_2 :: Pos -> Direction -> Pos 
travel_2 (Pos 2 0) U = topos_2 '1'
travel_2 (Pos 2 0) D = topos_2 '3'
travel_2 (Pos 2 0) L = topos_2 '1'
travel_2 (Pos 2 0) R = topos_2 '1'

travel_2 (Pos 1 1) U = topos_2 '2'
travel_2 (Pos 1 1) D = topos_2 '6'
travel_2 (Pos 1 1) L = topos_2 '2'
travel_2 (Pos 1 1) R = topos_2 '3'

travel_2 (Pos 2 1) U = topos_2 '1'
travel_2 (Pos 2 1) D = topos_2 '7'
travel_2 (Pos 2 1) L = topos_2 '2'
travel_2 (Pos 2 1) R = topos_2 '4'

travel_2 (Pos 3 1) U = topos_2 '4'
travel_2 (Pos 3 1) D = topos_2 '8'
travel_2 (Pos 3 1) L = topos_2 '3'
travel_2 (Pos 3 1) R = topos_2 '4'

travel_2 (Pos 0 2) U = topos_2 '5'
travel_2 (Pos 0 2) D = topos_2 '5'
travel_2 (Pos 0 2) L = topos_2 '5'
travel_2 (Pos 0 2) R = topos_2 '6'

travel_2 (Pos 1 2) U = topos_2 '2'
travel_2 (Pos 1 2) D = topos_2 'A'
travel_2 (Pos 1 2) L = topos_2 '5'
travel_2 (Pos 1 2) R = topos_2 '7'

travel_2 (Pos 2 2) U = topos_2 '3'
travel_2 (Pos 2 2) D = topos_2 'B'
travel_2 (Pos 2 2) L = topos_2 '6'
travel_2 (Pos 2 2) R = topos_2 '8'

travel_2 (Pos 3 2) U = topos_2 '4'
travel_2 (Pos 3 2) D = topos_2 'C'
travel_2 (Pos 3 2) L = topos_2 '7'
travel_2 (Pos 3 2) R = topos_2 '9'

travel_2 (Pos 4 2) U = topos_2 '9'
travel_2 (Pos 4 2) D = topos_2 '9'
travel_2 (Pos 4 2) L = topos_2 '8'
travel_2 (Pos 4 2) R = topos_2 '9'

travel_2 (Pos 1 3) U = topos_2 '6'
travel_2 (Pos 1 3) D = topos_2 'A'
travel_2 (Pos 1 3) L = topos_2 'A'
travel_2 (Pos 1 3) R = topos_2 'B'

travel_2 (Pos 2 3) U = topos_2 '7'
travel_2 (Pos 2 3) D = topos_2 'D'
travel_2 (Pos 2 3) L = topos_2 'A'
travel_2 (Pos 2 3) R = topos_2 'C'

travel_2 (Pos 3 3) U = topos_2 '8'
travel_2 (Pos 3 3) D = topos_2 'C'
travel_2 (Pos 3 3) L = topos_2 'B'
travel_2 (Pos 3 3) R = topos_2 'C'

travel_2 (Pos 2 4) U = topos_2 'B'
travel_2 (Pos 2 4) D = topos_2 'D'
travel_2 (Pos 2 4) L = topos_2 'D'
travel_2 (Pos 2 4) R = topos_2 'D'

-- answers

advent2_1 = do
    let a = "RDLULDLDDRLLLRLRULDRLDDRRRRURLRLDLULDLDLDRULDDLLDRDRUDLLDDRDULLLULLDULRRLDURULDRUULLLUUDURURRDDLDLDRRDDLRURLLDRRRDULDRULURURURURLLRRLUDULDRULLDURRRLLDURDRRUUURDRLLDRURULRUDULRRRRRDLRLLDRRRDLDUUDDDUDLDRUURRLLUDUDDRRLRRDRUUDUUULDUUDLRDLDLLDLLLLRRURDLDUURRLLDLDLLRLLRULDDRLDLUDLDDLRDRRDLULRLLLRUDDURLDLLULRDUUDRRLDUDUDLUURDURRDDLLDRRRLUDULDULDDLLULDDDRRLLDURURURUUURRURRUUDUUURULDLRULRURDLDRDDULDDULLURDDUDDRDRRULRUURRDDRLLUURDRDDRUDLUUDURRRLLRR";
    let b = "RDRRLURDDDDLDUDLDRURRLDLLLDDLURLLRULLULUUURLDURURULDLURRLRULDDUULULLLRLLRDRRUUDLUUDDUDDDRDURLUDDRULRULDDDLULRDDURRUURLRRLRULLURRDURRRURLDULULURULRRLRLUURRRUDDLURRDDUUDRDLLDRLRURUDLDLLLLDLRURDLLRDDUDDLDLDRRDLRDRDLRRRRUDUUDDRDLULUDLUURLDUDRRRRRLUUUDRRDLULLRRLRLDDDLLDLLRDDUUUUDDULUDDDUULDDUUDURRDLURLLRUUUUDUDRLDDDURDRLDRLRDRULRRDDDRDRRRLRDULUUULDLDDDUURRURLDLDLLDLUDDLDLRUDRLRLDURUDDURLDRDDLLDDLDRURRULLURULUUUUDLRLUUUDLDRUDURLRULLRLLUUULURLLLDULLUDLLRULRRLURRRRLRDRRLLULLLDURDLLDLUDLDUDURLURDLUURRRLRLLDRLDLDRLRUUUDRLRUDUUUR"
    let c = "LLLLULRDUUDUUDRDUUURDLLRRLUDDDRLDUUDDURLDUDULDRRRDDLLLRDDUDDLLLRRLURDULRUUDDRRDLRLRUUULDDULDUUUDDLLDDDDDURLDRLDDDDRRDURRDRRRUUDUUDRLRRRUURUDURLRLDURDDDUDDUDDDUUDRUDULDDRDLULRURDUUDLRRDDRRDLRDLRDLULRLLRLRLDLRULDDDDRLDUURLUUDLLRRLLLUUULURUUDULRRRULURUURLDLLRURUUDUDLLUDLDRLLRRUUDDRLUDUDRDDRRDDDURDRUDLLDLUUDRURDLLULLLLUDLRRRUULLRRDDUDDDUDDRDRRULURRUUDLUDLDRLLLLDLUULLULLDDUDLULRDRLDRDLUDUDRRRRLRDLLLDURLULUDDRURRDRUDLLDRURRUUDDDRDUUULDURRULDLLDLDLRDUDURRRRDLDRRLUDURLUDRRLUDDLLDUULLDURRLRDRLURURLUUURRLUDRRLLULUULUDRUDRDLUL"
    let d = "LRUULRRUDUDDLRRDURRUURDURURLULRDUUDUDLDRRULURUDURURDRLDDLRUURLLRDLURRULRRRUDULRRULDLUULDULLULLDUDLLUUULDLRDRRLUURURLLUUUDDLLURDUDURULRDLDUULDDRULLUUUURDDRUURDDDRUUUDRUULDLLULDLURLRRLRULRLDLDURLRLDLRRRUURLUUDULLLRRURRRLRULLRLUUDULDULRDDRDRRURDDRRLULRDURDDDDDLLRRDLLUUURUULUDLLDDULDUDUUDDRURDDURDDRLURUDRDRRULLLURLUULRLUDUDDUUULDRRRRDLRLDLLDRRDUDUUURLRURDDDRURRUDRUURUUDLRDDDLUDLRUURULRRLDDULRULDRLRLLDRLURRUUDRRRLRDDRLDDLLURLLUDL"
    let e = "ULURLRDLRUDLLDUDDRUUULULUDDDDDRRDRULUDRRUDLRRRLUDLRUULRDDRRLRUDLUDULRULLUURLLRLLLLDRDUURDUUULLRULUUUDRDRDRUULURDULDLRRULUURURDULULDRRURDLRUDLULULULUDLLUURULDLLLRDUDDRRLULUDDRLLLRURDDLDLRLLLRDLDRRUUULRLRDDDDRUDRUULDDRRULLDRRLDDRRUDRLLDUDRRUDDRDLRUDDRDDDRLLRDUULRDRLDUDRLDDLLDDDUUDDRULLDLLDRDRRUDDUUURLLUURDLULUDRUUUDURURLRRDULLDRDDRLRDULRDRURRUDLDDRRRLUDRLRRRRLLDDLLRLDUDUDDRRRUULDRURDLLDLUULDLDLDUUDDULUDUDRRDRLDRDURDUULDURDRRDRRLLRLDLU"
    
    let numa = followWithPos (num_1) (travel_1) (topos_1 '5') $ transf a
    let numb = followWithPos (num_1) (travel_1) (topos_1 numa) $ transf b
    let numc = followWithPos (num_1) (travel_1) (topos_1 numb) $ transf c
    let numd = followWithPos (num_1) (travel_1) (topos_1 numc) $ transf d
    let nume = followWithPos (num_1) (travel_1) (topos_1 numd) $ transf e
    
    foldl1 (++) $ map (show) [numa, numb, numc, numd, nume]

advent2_2 = do
    let a = "RDLULDLDDRLLLRLRULDRLDDRRRRURLRLDLULDLDLDRULDDLLDRDRUDLLDDRDULLLULLDULRRLDURULDRUULLLUUDURURRDDLDLDRRDDLRURLLDRRRDULDRULURURURURLLRRLUDULDRULLDURRRLLDURDRRUUURDRLLDRURULRUDULRRRRRDLRLLDRRRDLDUUDDDUDLDRUURRLLUDUDDRRLRRDRUUDUUULDUUDLRDLDLLDLLLLRRURDLDUURRLLDLDLLRLLRULDDRLDLUDLDDLRDRRDLULRLLLRUDDURLDLLULRDUUDRRLDUDUDLUURDURRDDLLDRRRLUDULDULDDLLULDDDRRLLDURURURUUURRURRUUDUUURULDLRULRURDLDRDDULDDULLURDDUDDRDRRULRUURRDDRLLUURDRDDRUDLUUDURRRLLRR";
    let b = "RDRRLURDDDDLDUDLDRURRLDLLLDDLURLLRULLULUUURLDURURULDLURRLRULDDUULULLLRLLRDRRUUDLUUDDUDDDRDURLUDDRULRULDDDLULRDDURRUURLRRLRULLURRDURRRURLDULULURULRRLRLUURRRUDDLURRDDUUDRDLLDRLRURUDLDLLLLDLRURDLLRDDUDDLDLDRRDLRDRDLRRRRUDUUDDRDLULUDLUURLDUDRRRRRLUUUDRRDLULLRRLRLDDDLLDLLRDDUUUUDDULUDDDUULDDUUDURRDLURLLRUUUUDUDRLDDDURDRLDRLRDRULRRDDDRDRRRLRDULUUULDLDDDUURRURLDLDLLDLUDDLDLRUDRLRLDURUDDURLDRDDLLDDLDRURRULLURULUUUUDLRLUUUDLDRUDURLRULLRLLUUULURLLLDULLUDLLRULRRLURRRRLRDRRLLULLLDURDLLDLUDLDUDURLURDLUURRRLRLLDRLDLDRLRUUUDRLRUDUUUR"
    let c = "LLLLULRDUUDUUDRDUUURDLLRRLUDDDRLDUUDDURLDUDULDRRRDDLLLRDDUDDLLLRRLURDULRUUDDRRDLRLRUUULDDULDUUUDDLLDDDDDURLDRLDDDDRRDURRDRRRUUDUUDRLRRRUURUDURLRLDURDDDUDDUDDDUUDRUDULDDRDLULRURDUUDLRRDDRRDLRDLRDLULRLLRLRLDLRULDDDDRLDUURLUUDLLRRLLLUUULURUUDULRRRULURUURLDLLRURUUDUDLLUDLDRLLRRUUDDRLUDUDRDDRRDDDURDRUDLLDLUUDRURDLLULLLLUDLRRRUULLRRDDUDDDUDDRDRRULURRUUDLUDLDRLLLLDLUULLULLDDUDLULRDRLDRDLUDUDRRRRLRDLLLDURLULUDDRURRDRUDLLDRURRUUDDDRDUUULDURRULDLLDLDLRDUDURRRRDLDRRLUDURLUDRRLUDDLLDUULLDURRLRDRLURURLUUURRLUDRRLLULUULUDRUDRDLUL"
    let d = "LRUULRRUDUDDLRRDURRUURDURURLULRDUUDUDLDRRULURUDURURDRLDDLRUURLLRDLURRULRRRUDULRRULDLUULDULLULLDUDLLUUULDLRDRRLUURURLLUUUDDLLURDUDURULRDLDUULDDRULLUUUURDDRUURDDDRUUUDRUULDLLULDLURLRRLRULRLDLDURLRLDLRRRUURLUUDULLLRRURRRLRULLRLUUDULDULRDDRDRRURDDRRLULRDURDDDDDLLRRDLLUUURUULUDLLDDULDUDUUDDRURDDURDDRLURUDRDRRULLLURLUULRLUDUDDUUULDRRRRDLRLDLLDRRDUDUUURLRURDDDRURRUDRUURUUDLRDDDLUDLRUURULRRLDDULRULDRLRLLDRLURRUUDRRRLRDDRLDDLLURLLUDL"
    let e = "ULURLRDLRUDLLDUDDRUUULULUDDDDDRRDRULUDRRUDLRRRLUDLRUULRDDRRLRUDLUDULRULLUURLLRLLLLDRDUURDUUULLRULUUUDRDRDRUULURDULDLRRULUURURDULULDRRURDLRUDLULULULUDLLUURULDLLLRDUDDRRLULUDDRLLLRURDDLDLRLLLRDLDRRUUULRLRDDDDRUDRUULDDRRULLDRRLDDRRUDRLLDUDRRUDDRDLRUDDRDDDRLLRDUULRDRLDUDRLDDLLDDDUUDDRULLDLLDRDRRUDDUUURLLUURDLULUDRUUUDURURLRRDULLDRDDRLRDULRDRURRUDLDDRRRLUDRLRRRRLLDDLLRLDUDUDDRRRUULDRURDLLDLUULDLDLDUUDDULUDUDRRDRLDRDURDUULDURDRRDRRLLRLDLU"
    
    let numa = followWithPos (num_2) (travel_2) (topos_2 '5') $ transf a
    let numb = followWithPos (num_2) (travel_2) (topos_2 numa) $ transf b
    let numc = followWithPos (num_2) (travel_2) (topos_2 numb) $ transf c
    let numd = followWithPos (num_2) (travel_2) (topos_2 numc) $ transf d
    let nume = followWithPos (num_2) (travel_2) (topos_2 numd) $ transf e
    
    foldl1 (++) $ map (show) [numa, numb, numc, numd, nume]
